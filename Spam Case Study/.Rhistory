save(emailStruct, file="emailXX.rda")
header = sampleStruct[[1]]$header
subject = header["Subject"]
els = strsplit(subject, "")
all(els %in% LETTERS)
testSubject = c("DEAR MADAME", "WINNER!", "")
els = strsplit(testSubject, "")
sapply(els, function(subject) all(subject %in% LETTERS))
gsub("[[:punct:] ]", "", testSubject)
gsub("[^[:alpha:]]", "", testSubject)
isYelling = function(msg) {
if ( "Subject" %in% names(msg$header) ) {
el = gsub("[^[:alpha:]]", "", msg$header["Subject"])
if (nchar(el) > 0)
nchar(gsub("[A-Z]", "", el)) < 1
else
FALSE
} else
NA
}
perCaps =
function(msg)
{
body = paste(msg$body, collapse = "")
# Return NA if the body of the message is "empty"
if(length(body) == 0 || nchar(body) == 0) return(NA)
# Eliminate non-alpha characters
body = gsub("[^[:alpha:]]", "", body)
capText = gsub("[^A-Z]", "", body)
100 * nchar(capText)/nchar(body)
}
sapply(sampleStruct, perCaps)
funcList = list(
isRe = function(msg) {
"Subject" %in% names(msg$header) &&
length(grep("^[ \t]*Re:", msg$header[["Subject"]])) > 0
},
numLines = function(msg)
length(msg$body),
isYelling = function(msg) {
if ( "Subject" %in% names(msg$header) ) {
el = gsub("[^[:alpha:]]", "", msg$header["Subject"])
if (nchar(el) > 0)
nchar(gsub("[A-Z]", "", el)) < 1
else
FALSE
}
else NA
},
perCaps = function(msg) {
body = paste(msg$body, collapse = "")
# Return NA if the body of the message is "empty"
if(length(body) == 0 || nchar(body) == 0) return(NA)
# Eliminate non-alpha characters
body = gsub("[^[:alpha:]]", "", body)
capText = gsub("[^A-Z]", "", body)
100 * nchar(capText)/nchar(body)
}
)
lapply(funcList, function(func)
sapply(sampleStruct, function(msg) func(msg)))
createDerivedDF =
function(email = emailStruct, operations = funcList,
verbose = FALSE)
{
els = lapply(names(operations),
function(id) {
if(verbose) print(id)
e = operations[[id]]
v = if(is.function(e))
sapply(email, e)
else
sapply(email, function(msg) eval(e))
v
})
df = as.data.frame(els)
names(df) = names(operations)
invisible(df)
}
sampleDF = createDerivedDF(sampleStruct)
head(sampleDF)
funcList = list(
isSpam =
expression(msg$isSpam)
,
isRe =
function(msg) {
# Can have a Fwd: Re:  ... but we are not looking for this here.
# We may want to look at In-Reply-To field.
"Subject" %in% names(msg$header) &&
length(grep("^[ \t]*Re:", msg$header[["Subject"]])) > 0
}
,
numLines =
function(msg) length(msg$body)
,
bodyCharCt =
function(msg)
sum(nchar(msg$body))
,
underscore =
function(msg) {
if(!"Reply-To" %in% names(msg$header))
return(FALSE)
txt <- msg$header[["Reply-To"]]
length(grep("_", txt)) > 0  &&
length(grep("[0-9A-Za-z]+", txt)) > 0
}
,
subExcCt =
function(msg) {
x = msg$header["Subject"]
if(length(x) == 0 || sum(nchar(x)) == 0 || is.na(x))
return(NA)
sum(nchar(gsub("[^!]","", x)))
}
,
subQuesCt =
function(msg) {
x = msg$header["Subject"]
if(length(x) == 0 || sum(nchar(x)) == 0 || is.na(x))
return(NA)
sum(nchar(gsub("[^?]","", x)))
}
,
numAtt =
function(msg) {
if (is.null(msg$attach)) return(0)
else nrow(msg$attach)
}
,
priority =
function(msg) {
ans <- FALSE
# Look for names X-Priority, Priority, X-Msmail-Priority
# Look for high any where in the value
ind = grep("priority", tolower(names(msg$header)))
if (length(ind) > 0)  {
ans <- length(grep("high", tolower(msg$header[ind]))) >0
}
ans
}
,
numRec =
function(msg) {
# unique or not.
els = getMessageRecipients(msg$header)
if(length(els) == 0)
return(NA)
# Split each line by ","  and in each of these elements, look for
# the @ sign. This handles
tmp = sapply(strsplit(els, ","), function(x) grep("@", x))
sum(sapply(tmp, length))
}
,
perCaps =
function(msg)
{
body = paste(msg$body, collapse = "")
# Return NA if the body of the message is "empty"
if(length(body) == 0 || nchar(body) == 0) return(NA)
# Eliminate non-alpha characters and empty lines
body = gsub("[^[:alpha:]]", "", body)
els = unlist(strsplit(body, ""))
ctCap = sum(els %in% LETTERS)
100 * ctCap / length(els)
}
,
isInReplyTo =
function(msg)
{
"In-Reply-To" %in% names(msg$header)
}
,
sortedRec =
function(msg)
{
ids = getMessageRecipients(msg$header)
all(sort(ids) == ids)
}
,
subPunc =
function(msg)
{
if("Subject" %in% names(msg$header)) {
el = gsub("['/.:@-]", "", msg$header["Subject"])
length(grep("[A-Za-z][[:punct:]]+[A-Za-z]", el)) > 0
}
else
FALSE
},
hour =
function(msg)
{
date = msg$header["Date"]
if ( is.null(date) ) return(NA)
# Need to handle that there may be only one digit in the hour
locate = regexpr("[0-2]?[0-9]:[0-5][0-9]:[0-5][0-9]", date)
if (locate < 0)
locate = regexpr("[0-2]?[0-9]:[0-5][0-9]", date)
if (locate < 0) return(NA)
hour = substring(date, locate, locate+1)
hour = as.numeric(gsub(":", "", hour))
locate = regexpr("PM", date)
if (locate > 0) hour = hour + 12
locate = regexpr("[+-][0-2][0-9]00", date)
if (locate < 0) offset = 0
else offset = as.numeric(substring(date, locate, locate + 2))
(hour - offset) %% 24
}
,
multipartText =
function(msg)
{
if (is.null(msg$attach)) return(FALSE)
numAtt = nrow(msg$attach)
types =
length(grep("(html|plain|text)", msg$attach$aType)) > (numAtt/2)
}
,
hasImages =
function(msg)
{
if (is.null(msg$attach)) return(FALSE)
length(grep("^ *image", tolower(msg$attach$aType))) > 0
}
,
isPGPsigned =
function(msg)
{
if (is.null(msg$attach)) return(FALSE)
length(grep("pgp", tolower(msg$attach$aType))) > 0
},
perHTML =
function(msg)
{
if(! ("Content-Type" %in% names(msg$header))) return(0)
el = tolower(msg$header["Content-Type"])
if (length(grep("html", el)) == 0) return(0)
els = gsub("[[:space:]]", "", msg$body)
totchar = sum(nchar(els))
totplain = sum(nchar(gsub("<[^<]+>", "", els )))
100 * (totchar - totplain)/totchar
},
subSpamWords =
function(msg)
{
if("Subject" %in% names(msg$header))
length(grep(paste(SpamCheckWords, collapse = "|"),
tolower(msg$header["Subject"]))) > 0
else
NA
}
,
subBlanks =
function(msg)
{
if("Subject" %in% names(msg$header)) {
x = msg$header["Subject"]
# should we count blank subject line as 0 or 1 or NA?
if (nchar(x) == 1) return(0)
else 100 *(1 - (nchar(gsub("[[:blank:]]", "", x))/nchar(x)))
} else NA
}
,
noHost =
function(msg)
{
# Or use partial matching.
idx = pmatch("Message-", names(msg$header))
if(is.na(idx)) return(NA)
tmp = msg$header[idx]
return(length(grep(".*@[^[:space:]]+", tmp)) ==  0)
}
,
numEnd =
function(msg)
{
# If we just do a grep("[0-9]@",  )
# we get matches on messages that have a From something like
# " \"marty66@aol.com\" <synjan@ecis.com>"
# and the marty66 is the "user's name" not the login
# So we can be more precise if we want.
x = names(msg$header)
if ( !( "From" %in% x) ) return(NA)
login = gsub("^.*<", "", msg$header["From"])
if ( is.null(login) )
login = gsub("^.*<", "", msg$header["X-From"])
if ( is.null(login) ) return(NA)
login = strsplit(login, "@")[[1]][1]
length(grep("[0-9]+$", login)) > 0
},
isYelling =
function(msg)
{
if ( "Subject" %in% names(msg$header) ) {
el = gsub("[^[:alpha:]]", "", msg$header["Subject"])
if (nchar(el) > 0) nchar(gsub("[A-Z]", "", el)) < 1
else FALSE
}
else
NA
},
forwards =
function(msg)
{
x = msg$body
if(length(x) == 0 || sum(nchar(x)) == 0)
return(NA)
ans = length(grep("^[[:space:]]*>", x))
100 * ans / length(x)
},
isOrigMsg =
function(msg)
{
x = msg$body
if(length(x) == 0) return(NA)
length(grep("^[^[:alpha:]]*original[^[:alpha:]]+message[^[:alpha:]]*$",
tolower(x) ) ) > 0
},
isDear =
function(msg)
{
x = msg$body
if(length(x) == 0) return(NA)
length(grep("^[[:blank:]]*dear +(sir|madam)\\>",
tolower(x))) > 0
},
isWrote =
function(msg)
{
x = msg$body
if(length(x) == 0) return(NA)
length(grep("(wrote|schrieb|ecrit|escribe):", tolower(x) )) > 0
},
avgWordLen =
function(msg)
{
txt = paste(msg$body, collapse = " ")
if(length(txt) == 0 || sum(nchar(txt)) == 0) return(0)
txt = gsub("[^[:alpha:]]", " ", txt)
words = unlist(strsplit(txt, "[[:blank:]]+"))
wordLens = nchar(words)
mean(wordLens[ wordLens > 0 ])
}
,
numDlr =
function(msg)
{
x = paste(msg$body, collapse = "")
if(length(x) == 0 || sum(nchar(x)) == 0)
return(NA)
nchar(gsub("[^$]","", x))
}
)
SpamCheckWords =
c("viagra", "pounds", "free", "weight", "guarantee", "million",
"dollars", "credit", "risk", "prescription", "generic", "drug",
"financial", "save", "dollar", "erotic", "million", "barrister",
"beneficiary", "easy",
"money back", "money", "credit card")
getMessageRecipients =
function(header)
{
c(if("To" %in% names(header))  header[["To"]] else character(0),
if("Cc" %in% names(header))  header[["Cc"]] else character(0),
if("Bcc" %in% names(header)) header[["Bcc"]] else character(0)
)
}
emailDF = createDerivedDF(emailStruct)
dim(emailDF)
#save(emailDF, file = "spamAssassinDerivedDF.rda")
load("Data/spamAssassinDerivedDF.rda")
dim(emailDF)
perCaps2 =
function(msg)
{
body = paste(msg$body, collapse = "")
# Return NA if the body of the message is "empty"
if(length(body) == 0 || nchar(body) == 0) return(NA)
# Eliminate non-alpha characters and empty lines
body = gsub("[^[:alpha:]]", "", body)
els = unlist(strsplit(body, ""))
ctCap = sum(els %in% LETTERS)
100 * ctCap / length(els)
}
pC = sapply(emailStruct, perCaps)
pC2 = sapply(emailStruct, perCaps2)
identical(pC, pC2)
indNA = which(is.na(emailDF$subExcCt))
indNoSubject = which(sapply(emailStruct,
function(msg)
!("Subject" %in% names(msg$header))))
all(indNA == indNoSubject)
all(emailDF$bodyCharCt > emailDF$numLines)
x.at = c(1,10,100,1000,10000,100000)
y.at = c(1, 5, 10, 50, 100, 500, 5000)
nL = 1 + emailDF$numLines
nC = 1 + emailDF$bodyCharCt
pdf("ScatterPlotNumLinesNumChars.pdf", width = 6, height = 4.5)
plot(nL ~ nC, log = "xy", pch=".", xlim=c(1,100000), axes = FALSE,
xlab = "Number of Characters", ylab = "Number of Lines")
box()
axis(1, at = x.at, labels = formatC(x.at, digits = 0, format="d"))
axis(2, at = y.at, labels = formatC(y.at, digits = 0, format="d"))
abline(a=0, b=1, col="red", lwd = 2)
dev.off()
pdf("SPAM_boxplotsPercentCaps.pdf", width = 5, height = 5)
percent = emailDF$perCaps
isSpamLabs = factor(emailDF$isSpam, labels = c("ham", "spam"))
boxplot(log(1 + percent) ~ isSpamLabs,
ylab = "Percent Capitals (log)")
dev.off()
logPerCapsSpam = log(1 + emailDF$perCaps[ emailDF$isSpam ])
logPerCapsHam = log(1 + emailDF$perCaps[ !emailDF$isSpam ])
qqplot(logPerCapsSpam, logPerCapsHam,
xlab = "Regular Email", ylab = "Spam Email",
main = "Percentage of Capital Letters (log scale)",
pch = 19, cex = 0.3)
pdf("SPAM_scatterplotPercentCapsTotChars.pdf", width = 8, height = 6)
colI = c("#4DAF4A80", "#984EA380")
logBodyCharCt = log(1 + emailDF$bodyCharCt)
logPerCaps = log(1 + emailDF$perCaps)
plot(logPerCaps ~ logBodyCharCt, xlab = "Total Characters (log)",
ylab = "Percent Capitals (log)",
col = colI[1 + emailDF$isSpam],
xlim = c(2,12), pch = 19, cex = 0.5)
dev.off()
table(emailDF$numAtt, isSpamLabs)
pdf("SPAM_mosaicPlots.pdf", width = 8, height = 4)
oldPar = par(mfrow = c(1, 2), mar = c(1,1,1,1))
colM = c("#E41A1C80", "#377EB880")
isRe = factor(emailDF$isRe, labels = c("no Re:", "Re:"))
mosaicplot(table(isSpamLabs, isRe), main = "",
xlab = "", ylab = "", color = colM)
fromNE = factor(emailDF$numEnd, labels = c("No #", "#"))
mosaicplot(table(isSpamLabs, fromNE), color = colM,
main = "", xlab="", ylab = "")
par(oldPar)
dev.off()
library(rpart)
setupRpart = function(data) {
logicalVars = which(sapply(data, is.logical))
facVars = lapply(data[ , logicalVars],
function(x) {
x = as.factor(x)
levels(x) = c("F", "T")
x
})
cbind(facVars, data[ , - logicalVars])
}
emailDFrp = setupRpart(emailDF)
set.seed(418910)
testSpamIdx = sample(numSpam, size = floor(numSpam/3))
testHamIdx = sample(numHam, size = floor(numHam/3))
testDF =
rbind( emailDFrp[ emailDFrp$isSpam == "T", ][testSpamIdx, ],
emailDFrp[emailDFrp$isSpam == "F", ][testHamIdx, ] )
trainDF =
rbind( emailDFrp[emailDFrp$isSpam == "T", ][-testSpamIdx, ],
emailDFrp[emailDFrp$isSpam == "F", ][-testHamIdx, ])
rpartFit = rpart(isSpam ~ ., data = trainDF, method = "class")
library(rpart.plot)
prp(rpartFit, extra = 1)
library(rpart.plot)
pdf("SPAM_rpartTree.pdf", width = 7, height = 7)
prp(rpartFit, extra = 1)
dev.off()
predictions = predict(rpartFit,
newdata = testDF[, names(testDF) != "isSpam"],
type = "class")
predsForHam = predictions[ testDF$isSpam == "F" ]
summary(predsForHam)
sum(predsForHam == "T") / length(predsForHam)
predsForSpam = predictions[ testDF$isSpam == "T" ]
sum(predsForSpam == "F") / length(predsForSpam)
complexityVals = c(seq(0.00001, 0.0001, length=19),
seq(0.0001, 0.001, length=19),
seq(0.001, 0.005, length=9),
seq(0.005, 0.01, length=9))
fits = lapply(complexityVals, function(x) {
rpartObj = rpart(isSpam ~ ., data = trainDF,
method="class",
control = rpart.control(cp=x) )
predict(rpartObj,
newdata = testDF[ , names(testDF) != "isSpam"],
type = "class")
})
spam = testDF$isSpam == "T"
numSpam = sum(spam)
numHam = sum(!spam)
errs = sapply(fits, function(preds) {
typeI = sum(preds[ !spam ] == "T") / numHam
typeII = sum(preds[ spam ] == "F") / numSpam
c(typeI = typeI, typeII = typeII)
})
pdf("SPAM_rpartTypeIandII.pdf", width = 8, height = 7)
library(RColorBrewer)
cols = brewer.pal(9, "Set1")[c(3, 4, 5)]
plot(errs[1,] ~ complexityVals, type="l", col=cols[2],
lwd = 2, ylim = c(0,0.2), xlim = c(0,0.005),
ylab="Error", xlab="complexity parameter values")
points(errs[2,] ~ complexityVals, type="l", col=cols[1], lwd = 2)
text(x =c(0.003, 0.0035), y = c(0.12, 0.05),
labels=c("Type II Error", "Type I Error"))
minI = which(errs[1,] == min(errs[1,]))[1]
abline(v = complexityVals[minI], col ="grey", lty =3, lwd=2)
text(0.0007, errs[1, minI]+0.01,
formatC(errs[1, minI], digits = 2))
text(0.0007, errs[2, minI]+0.01,
formatC(errs[2, minI], digits = 3))
dev.off()
